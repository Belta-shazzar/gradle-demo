name: Docker CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title={{repo}}
            org.opencontainers.image.description={{description}}
            org.opencontainers.image.vendor={{vendor}}
            org.opencontainers.image.source={{repo}}
            org.opencontainers.image.version={{version}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.created={{created}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name != 'pull_request'
    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Extract the SHA tag from the tags output
            IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | grep "main-" | head -1)
            echo "Pulling image: ${IMAGE_TAG}"
            docker pull ${IMAGE_TAG}
            echo "Image pulled successfully"
            
            # Stop existing container
            CONTAINER_NAME="gradle-demo"
            if docker ps -q -f name=${CONTAINER_NAME}; then
              echo "Stopping existing container: ${CONTAINER_NAME}"
              docker stop ${CONTAINER_NAME}
              docker rm ${CONTAINER_NAME}
            else
              echo "No existing container found with name: ${CONTAINER_NAME}"
            fi
            
            # Start new container
            echo "Starting new container: ${CONTAINER_NAME} with image: ${IMAGE_TAG}"
            docker run -d \
              --name ${CONTAINER_NAME} \
              --restart unless-stopped \
              -p 8080:8080 \
              -e NODE_ENV=production \
              ${IMAGE_TAG}
            
            # Verify deployment
            echo "Waiting for application to start..."
            sleep 10
            
            if curl -f http://localhost:8080/api/apod/info; then
              echo "Deployment successful! App is running on port 8080"
            else
              echo "Health check failed, but container might still be starting..."
              echo "Container status:"
              docker ps -f name=${CONTAINER_NAME}
              echo "Container logs:"
              docker logs ${CONTAINER_NAME} --tail 20
            fi
            
            # Cleanup old images and containers
            echo "Cleaning up old Docker resources..."
            docker image prune -f
            docker container prune -f
            docker volume prune -f
            docker network prune -f
            docker system prune -f
            
            echo "Deployment completed!"